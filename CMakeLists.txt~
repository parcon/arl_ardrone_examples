cmake_minimum_required(VERSION 2.8.3)
project(ARL_Ardrone_control)

## Find catkin macros and libraries
## if COMPONENTS list like find_package(catkin REQUIRED COMPONENTS xyz)
## is used, also find other catkin packages
find_package(catkin REQUIRED COMPONENTS
  ardrone_autonomy
  geometry_msgs
  roscpp
  sensor_msgs
  std_msgs
  tf
)

## System dependencies are found with CMake's conventions
# find_package(Boost REQUIRED COMPONENTS system)


## Uncomment this if the package has a setup.py. This macro ensures
## modules and global scripts declared therein get installed
## See http://ros.org/doc/api/catkin/html/user_guide/setup_dot_py.html
# catkin_python_setup()

################################################
## Declare ROS messages, services and actions ##
################################################

## To declare and build messages, services or actions from within this
## package, follow these steps:
## * Let MSG_DEP_SET be the set of packages whose message types you use in
##   your messages/services/actions (e.g. std_msgs, actionlib_msgs, ...).
## * In the file package.xml:
##   * add a build_depend and a run_depend tag for each package in MSG_DEP_SET
##   * If MSG_DEP_SET isn't empty the following dependencies might have been
##     pulled in transitively but can be declared for certainty nonetheless:
##     * add a build_depend tag for "message_generation"
##     * add a run_depend tag for "message_runtime"
## * In this file (CMakeLists.txt):
##   * add "message_generation" and every package in MSG_DEP_SET to
##     find_package(catkin REQUIRED COMPONENTS ...)
##   * add "message_runtime" and every package in MSG_DEP_SET to
##     catkin_package(CATKIN_DEPENDS ...)
##   * uncomment the add_*_files sections below as needed
##     and list every .msg/.srv/.action file to be processed
##   * uncomment the generate_messages entry below
##   * add every package in MSG_DEP_SET to generate_messages(DEPENDENCIES ...)

## Generate messages in the 'msg' folder
# add_message_files(
#   FILES
#   Message1.msg
#   Message2.msg
# )

## Generate services in the 'srv' folder
# add_service_files(
#   FILES
#   Service1.srv
#   Service2.srv
# )

## Generate actions in the 'action' folder
# add_action_files(
#   FILES
#   Action1.action
#   Action2.action
# )

## Generate added messages and services with any dependencies listed here
# generate_messages(
#   DEPENDENCIES
#   geometry_msgs#   sensor_msgs#   std_msgs
# )

###################################
## catkin specific configuration ##
###################################
## The catkin_package macro generates cmake config files for your package
## Declare things to be passed to dependent projects
## INCLUDE_DIRS: uncomment this if you package contains header files
## LIBRARIES: libraries you create in this project that dependent projects also need
## CATKIN_DEPENDS: catkin_packages dependent projects also need
## DEPENDS: system dependencies of this project that dependent projects also need
catkin_package(
#  INCLUDE_DIRS include
#  LIBRARIES ARL_Ardrone_control
  CATKIN_DEPENDS ardrone_autonomy geometry_msgs roscpp sensor_msgs std_msgs tf
#  DEPENDS system_lib
)

###########
## Build ##
###########

## Specify additional locations of header files
## Your package locations should be listed before other locations
# include_directories(include)
include_directories(
  ${catkin_INCLUDE_DIRS}
)

## Declare a cpp library
# add_library(ARL_Ardrone_control
#   src/${PROJECT_NAME}/ARL_Ardrone_control.cpp
# )

## Declare a cpp executable
 add_executable(led_dance src/control_leds.cpp)
 add_executable(ardrone_test src/test_fly.cpp)
 add_executable(ardrone_test_back_and_forth src/fly_back_forth.cpp)
 add_executable(reset src/reset.cpp)
 add_executable(land src/land.cpp)
 add_executable(takeoff src/takeoff.cpp)
 add_executable(test_find_K src/test_fly_find_K.cpp)
 add_executable(joy_test_find_K src/fly_from_joy_test_K.cpp)
 add_executable(fly_joy src/fly_from_joy.cpp)

## Add cmake target dependencies of the executable/library
## as an example, message headers may need to be generated before nodes
 add_dependencies(led_dance ardrone_autonomy)
 add_dependencies(ardrone_test ardrone_autonomy)
 add_dependencies(ardrone_test_back_and_forth ardrone_autonomy)
 add_dependencies(reset ardrone_autonomy)
 add_dependencies(land ardrone_autonomy)
 add_dependencies(takeoff ardrone_autonomy)
 add_dependencies(test_find_K ardrone_autonomy)
 add_dependencies(joy_test_find_K ardrone_autonomy)
 add_dependencies(fly_joy ardrone_autonomy)



## Specify libraries to link a library or executable target against
 target_link_libraries(led_dance
   ${catkin_LIBRARIES}
 )
 target_link_libraries(ardrone_test
   ${catkin_LIBRARIES}
 )
 target_link_libraries(ardrone_test_back_and_forth
   ${catkin_LIBRARIES}
 )
 target_link_libraries(reset
   ${catkin_LIBRARIES}
 )
 target_link_libraries(land
   ${catkin_LIBRARIES}
 )
 target_link_libraries(takeoff
   ${catkin_LIBRARIES}
 )
 target_link_libraries(test_find_K
   ${catkin_LIBRARIES}
 )
 target_link_libraries(joy_test_find_K
   ${catkin_LIBRARIES}
 )
 target_link_libraries(fly_joy
   ${catkin_LIBRARIES}
 )


#############
## Install ##
#############

# all install targets should use catkin DESTINATION variables
# See http://ros.org/doc/api/catkin/html/adv_user_guide/variables.html

## Mark executable scripts (Python etc.) for installation
## in contrast to setup.py, you can choose the destination
# install(PROGRAMS
#   scripts/my_python_script
#   DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
# )

## Mark executables and/or libraries for installation
# install(TARGETS ARL_Ardrone_control ARL_Ardrone_control_node
#   ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
#   LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
#   RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
# )

## Mark cpp header files for installation
# install(DIRECTORY include/${PROJECT_NAME}/
#   DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION}
#   FILES_MATCHING PATTERN "*.h"
#   PATTERN ".svn" EXCLUDE
# )

## Mark other files for installation (e.g. launch and bag files, etc.)
# install(FILES
#   # myfile1
#   # myfile2
#   DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}
# )

#############
## Testing ##
#############

## Add gtest based cpp test target and link libraries
# catkin_add_gtest(${PROJECT_NAME}-test test/test_ARL_Ardrone_control.cpp)
# if(TARGET ${PROJECT_NAME}-test)
#   target_link_libraries(${PROJECT_NAME}-test ${PROJECT_NAME})
# endif()

## Add folders to be run by python nosetests
# catkin_add_nosetests(test)
